service: app
# app and org for use with dashboard.serverless.com

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: go1.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-northeast-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:*:*:*"
    - Effect: Allow
      Action:
        - sqs:GetQueueUrl
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
        - sqs:SendMessage
      Resource: "arn:aws:sqs:*:*:*"

  environment:
    TABLE_NAME_USER: hiupt-user-${opt:stage, self:provider.stage}
    TABLE_NAME_PETITION: hiupt-petition-${opt:stage, self:provider.stage}
    TABLE_NAME_CONSENT: hiupt-consent-${opt:stage, self:provider.stage}
    QUEUE_NAME_AUTH_CHALLENGE_EMAIL: hiupt-auth-challenge-email-${opt:stage, self:provider.stage}
    QUEUE_NAME_AUTH_CHALLENGE_EMAIL_DEAD_LETTER: hiupt-auth-challenge-email-dead-letter-${opt:stage, self:provider.stage}
    ACCESS_SECRET: aaaaaaaaa

package:
  exclude:
    - ./src/**
    - ./go/**
    - ./node_modules/**
  include:
    - ./bin/lambda/**

functions:
  # Users
  userRetrieve:
    handler: bin/lambda/users/retrieve
    events:
      - httpApi:
          path: /users/{hash_key}
          method: get

  # Auth
  authSignUp:
    handler: bin/lambda/auth/signup
    events:
      - httpApi:
          path: /auth/signup
          method: post

  authSignIn:
    handler: bin/lambda/auth/signin
    events:
      - httpApi:
          path: /auth/signin
          method: post

  authChallenge:
    handler: bin/lambda/auth/challenge
    events:
      - httpApi:
          path: /auth/challenge
          method: post

  # Petitions
  petitionCreate:
    handler: bin/lambda/petitions/create
    events:
      - httpApi:
          path: /petitions/create
          method: post

  petitionList:
    handler: bin/lambda/petitions/list
    events:
      - httpApi:
          path: /petitions
          method: get

  petitionRetrieve:
    handler: bin/lambda/petitions/retrieve
    events:
      - httpApi:
          path: /petitions/{hash_key}
          method: get

  petitionDelete:
    handler: bin/lambda/petitions/delete
    events:
      - httpApi:
          path: /petitions/{hash_key}
          method: delete

  # Consents
  consentsCreate:
    handler: bin/lambda/consents/create
    events:
      - httpApi:
          path: /petitions/{hash_key}/consents
          method: post

  consentsList:
    handler: bin/lambda/consents/list
    events:
      - httpApi:
          path: /petitions/{hash_key}/consents
          method: get

resources:
  Resources:
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: hiupt-user-${opt:stage, self:provider.stage}
        KeySchema:
          - AttributeName: hash_key
            KeyType: HASH
          - AttributeName: student_id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: hash_key
            AttributeType: S
          - AttributeName: student_id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    petitionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: hiupt-petition-${opt:stage, self:provider.stage}
        KeySchema:
          - AttributeName: hash_key
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: hash_key
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    consentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: hiupt-consent-${opt:stage, self:provider.stage}
        KeySchema:
          - AttributeName: petition_hash_key
            KeyType: HASH
          - AttributeName: user_hash_key
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: petition_hash_key
            AttributeType: S
          - AttributeName: user_hash_key
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # SQS
    authChallengeEmailQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: hiupt-auth-challenge-email-${opt:stage, self:provider.stage}
        MessageRetentionPeriod: 1209600
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - authChallengeEmailDeadLetterQueue
              - Arn
          maxReceiveCount: 10

    authChallengeEmailDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: hiupt-auth-challenge-email-dead-letter-${opt:stage, self:provider.stage}
        MessageRetentionPeriod: 1209600

    # SES

    #

plugins:
  - serverless-offline